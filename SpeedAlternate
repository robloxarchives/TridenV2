local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

-- Rig parts
local LocalCharacter = workspace:WaitForChild("Ignore"):WaitForChild("LocalCharacter")
local middle = LocalCharacter:WaitForChild("Middle")
local bottom = LocalCharacter:WaitForChild("Bottom")
local top = LocalCharacter:WaitForChild("Top")

-- Config
local DEFAULT_SPEED = 70
local MIN_SPEED = 17
local CAMERA_SPEED = 70
local bhop_enabled = true
local downcliff_mode = false

-- State
local currentSpeed = DEFAULT_SPEED
local wtf = 0

RunService.RenderStepped:Connect(function(delta)
	if not (bhop_enabled and not downcliff_mode) then return end

	local shiftHeld = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)
	local cHeld = UserInputService:IsKeyDown(Enum.KeyCode.C)

	if shiftHeld and cHeld then
		-- ✅ Default SwimHub-style speed with WASD, lift, decay
		local camLook = Camera.CFrame.LookVector
		local move = Vector3.zero
		local flat = Vector3.new(camLook.X, 0, camLook.Z).Unit

		if UserInputService:IsKeyDown(Enum.KeyCode.W) then move += flat end
		if UserInputService:IsKeyDown(Enum.KeyCode.S) then move -= flat end
		if UserInputService:IsKeyDown(Enum.KeyCode.D) then move += Vector3.new(-flat.Z, 0, flat.X) end
		if UserInputService:IsKeyDown(Enum.KeyCode.A) then move += Vector3.new(flat.Z, 0, -flat.X) end

		if move.Magnitude == 0 then
			currentSpeed = DEFAULT_SPEED
			wtf = 0
			return
		end

		move = move.Unit
		currentSpeed = math.clamp(currentSpeed - delta * 20, MIN_SPEED, DEFAULT_SPEED)

		if wtf == 0 then
			local topCF = top.CFrame
			local midCF = middle.CFrame
			local botCF = bottom.CFrame

			middle.CFrame = midCF + Vector3.yAxis * 6
			bottom.CFrame = botCF + Vector3.yAxis * 6
			top.CFrame = topCF + Vector3.yAxis * 6
		end

		local yForce = wtf < 0.85 and 0 or -7
		local velocity = move * currentSpeed + Vector3.new(0, yForce, 0)

		middle.AssemblyLinearVelocity = velocity
		bottom.AssemblyLinearVelocity = velocity
		top.AssemblyLinearVelocity = velocity

		wtf += delta

	elseif cHeld and not shiftHeld then
		-- ✅ Pure camera-based flying while only C is held
		local lookDirection = Camera.CFrame.LookVector.Unit
		local velocity = lookDirection * CAMERA_SPEED

		middle.AssemblyLinearVelocity = velocity
		bottom.AssemblyLinearVelocity = velocity
		top.AssemblyLinearVelocity = velocity

	else
		-- Reset state if neither applies
		currentSpeed = DEFAULT_SPEED
		wtf = 0
	end
end)
